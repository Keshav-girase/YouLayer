/* eslint-disable no-undef */
const nodemailer = require('nodemailer');
const path = require('path');
const ejs = require('ejs');
const { generateInvitationToken } = require('../utils/generateToken');
const Invitation = require('../models/Invitation');
const Team = require('../models/Team');
const Creator = require('../models/Creator');

exports.inviteTeamMember = async (req, res) => {
  const { name, email, role, inviter } = req.body;
  // const { email, managerName, creatorName } = req.body;
  const creatorId = req.user.id; // Access creator's user ID is passed via JWT

  if (!email || !name || !role || !inviter) {
    return res.status(400).json({ message: 'Email, name, role and inviter name are required' });
  }

  const invitationToken = generateInvitationToken();
    
  let team = await Team.findOne({ creator: creatorId });
  if (!team) {
    const creator = await Creator.findById(creatorId);
    if (!creator) {
      return res.status(404).json({ message: 'Creator not found' });
    }

    team = new Team({
      name: `${creator.name}'s Team`, // Concatenate name with apostrophe "s"
      creator: creatorId, // Link the team to the creator
      members: [], // Start with an empty members array
    });

    await team.save();
  }
  const teamId = team._id
  // Create invitation
  const invitation = new Invitation({
    email,
    token: invitationToken,
    creator: creatorId,
    team: teamId,
  });

  await invitation.save();
  
  const invitationLink = `${process.env.FRONTEND_URL}/manager/dashboard/accept-invitation?token=${invitationToken}`;

  // Create a Nodemailer transporter
  const transporter = nodemailer.createTransport({
    service: 'gmail', // Can use other services (e.g., SendGrid, SMTP)
    auth: {
      user: process.env.EMAIL_USER, // Your email
      pass: process.env.EMAIL_PASS  // Your email password or app password
    }
  });

  try {
    // Load and render the email template using EJS
    const emailTemplatePath = path.join(__dirname, 'views', 'emailTemplate.html');
    const htmlContent = await ejs.renderFile(emailTemplatePath, { "managerName": name , "creatorName": inviter, "role": role , invitationLink });

    // Send email
    const mailOptions = {
      from: process.env.EMAIL_USER, // Sender address
      to: email, // Receiver's email
      subject: `You are invited to join as a ${role}`, // Email subject
      html: htmlContent // HTML content generated by EJS
    };

    const info = await transporter.sendMail(mailOptions);

    // Respond once email is sent
    res.json({ message: 'Invitation sent successfully', info });
  } catch (err) {
    // console.error('Error:', err);
    res.status(500).send('Error sending email.');
  }
};

exports.acceptedInvitation = async (req, res) => {
  const { token } = req.query;
  const userId = req.user.id;

  // Validate token
  const invitation = await Invitation.findOne({ token });

  if (!invitation) {
    return res.status(400).json({ message: 'Invalid or expired invitation token' });
  }

  // Optional: Cross-check emails
  if (invitation.email && invitation.email !== req.user.email) {
    return res.status(403).json({ message: 'This invitation is not for your account.' });
  }

  if (invitation.status === "Accepted") {
    return res.status(409).json({ message: 'You already accepted the invitation.' });
  }

  try {
    await Team.findByIdAndUpdate(invitation.team, {
      $addToSet: { members: userId },
    });

    invitation.status = 'Accepted';
    await invitation.save();

    res.status(200).json({ message: 'Invitation accepted successfully' });
  } catch (err) {
    res.status(500).json({ message: 'Failed to update Team', error: err.message });
  }
};